Ideas for storing implied or external auth rules in metadata
------------------------------------------------------------

Background
----------

From its implementation in 1998 until recently, the Roles Database has 
only been used to store and disseminate Authorizations directly entered 
into the system via people.  A kind of "implied" Authorization has been 
supported since the first implementation of the system, i.e., if the
Qualifier component of an Authorization is a parent of other Qualifiers,
then the holder of that Authorization has implied Authorizations for 
the same Function on the child Qualifiers.  In recent years, parent/child
relationships between Functions have also been defined, thus allowing for
implied Authorizations on Function dimension as well.  However, in both 
of these cases, the Roles Database has been the sole system of record 
for the Authorizations;  the system has not supported Authorizations 
derived from information sources outside of the Roles Database.

In 2006, support has been added to store externally-derived Authorizations
in the Roles Database as well.  These External Authorizations (XAuths) 
are stored in a separate table that mirrors the Authorization table.
(There is a view that makes it possible to view both external and 
common Authorizations through a single SQL Select statement.)  It is 
important that the XAuths be distinguishable from common Authorizations, 
since only the common Authorizations can be directly maintained by 
people using the Roles application.  XAuths, being derived from 
external sources, are updated each night by identifying required 
changes implied by the external data sources, which are currently 
a set of tables in the data Warehouse.  The only supported XAuths 
at this time are related to the EHS system.

As of this writing, XAuths are generated by a program running nightly 
on the Roles Database server that uses hard-coded SQL Select statements 
to extract the externally-derived Authorizations from the source tables 
in the Warehouse.  This approach has three shortcomings:
  (1) It hides the logic for deriving the XAuths in the program, where
      it is only visible to maintainers/developers of the Roles Database
  (2) When changes or additions are made to the externally-derived
      Authorizations, these changes must be made by a developer
      modifying the data feed program, rather than allowing 
      the maintenance of these rules to be done by a group of 
      appropriately-authorized individuals who understand the business
      logic
  (3) It only supports a nightly feed of data, rather than supporting 
      dynamically-derived data, which is our goal as we move toward a 
      Service Oriented Architecture 

We propose to improve the situation by developing a subsystem to 
support table-driven metadata about the externally-derived Authorizations.
With such a subsystem, we would rectify the three shortcomings cited above:
  (1) Rules for deriving XAuths would be visible through a web (or other)
      interface, making it possible for auditors, system administrators,
      or other specifically-authorized individuals to view the metadata
      that drives the rules.
  (2) Changes or additions to rules for XAuths could be made via a web 
      or other interface by specifically authorized individuals who do 
      not need to be developers.  The set of people allowed to modify
      the rules would be a smaller set than those allowed to view them.
  (3) Rules would support not only the current batch-feed of 
      externally-derived Authorizations, but would also permit a 
      the XAuths to be derived in real-time, eliminating the need to 
      actually store them in a table in the Roles Database.  Applications 
      that use the XAuths should be written to use an API that hides 
      the actual source of the XAuths.  Applications would not need to 
      know whether the XAuths are dynamically derived in real-time from 
      external sources or cached in an actual database table in the 
      Roles DB, and we would be able to migrate to a real-time
      Service Oriented Architecture over time.

Approaches for a metadata description for XAuths
------------------------------------------------

It should be possible to adapt or invent an XML-based standard for
storing metadata on XAuths.  However, current standards (such as XACML
or SAML), though designed to handle authorizations and rules, do not 
cleanly address the problem to be solved.  We want to keep an open mind 
about adapting and utilizing standards from outside of MIT, but for the
moment, we see problems with various outside standards.  Without 
presenting an exhaustive list of possible outside solutions and their
shortcomings, we will list some concerns:
  (1) Outside standards deal with either simple one-dimensional Groups, 
      or with n-dimensional objects.  None are tailor-made for the
      triplets (Person, Function, Qualifier) that have served us well
      at MIT for the past 7+ years
  (2) XACML presents a format for defining rules for making permission 
      decisions in distributed systems, rather than defining rules for 
      turning data into 3-part Authorizations which then can directly 
      answer Authorization questions.  Possibly, we will revisit the 
      possibility of using this standard for representing rules for 
      deriving Authorizations from other sources, but at the moment, it 
      seems like a less than ideal fit for the problem
  (3) Much of the data that will be a source for externally-derived
      Authorizations is currently available via SQL Select statements 
      from the Warehouse, but there are not yet any real-time services 
      to expose the data.  We expect this to change over time, but 
      a system that supports SQL Select statements or fragments would 
      give us a lot of functionality in the present.

We choose an approach for the first phase of work for this project 
that will allow us to move forward with some short-term benefits, 
learn more about the problem, and position us for future development.
The phase 1 approach will be to use our own custom-designed database 
tables to store the rules for implied authorizations in a format 
well-suited for solving MIT's specific problems.  This approach will 
make it easier to concentrate on actually collecting and implementing 
the data necessary to meet our requirements.  A later step may well be
to convert the metadata we've gathered at MIT into a form based 
on an outside standard.  If outside standards are appropriate
for solving the problems we've identified, then our initial work on 
storing the metadata in our own custom format should not be lost, but 
should be considered a stepping stone to utilizing the outside standard.

How will the proposed subsystem work?
-------------------------------------

- define rules so that you can derive a set of Authorizations for 
  everybody, for a person, for a function, or a qualifier.  In other
  words, describe them so that they would work for a batch feed or for
  a real-time lookup of an individual authorization
- include enough data about source information and target authorizations 
  that it will be easy to judge the impact of upstream system changes on
  the derived authorizations
- derived authorizations will work similarly to current Roles DB 
  authorizations, e.g., they are additive, they apply to child 
  qualifiers, they apply to child functions, etc..



Description of database tables used to store the metadata
---------------------------------------------------------

table external_auth_rule
  rule_id
  description
  derived_function_id
  source_type             (S=SQL, R=roles auth or xauth, ...)
  

table external_rule_by_sql
  rule_id
  source_database
  sql_string

table external_rule_by_roles_auth
  rule_id
  auth_or_xauth     (A or X)
  source_function_id
  target_function_id
  qual_tree_traversal   (E=exact - use source qualifier_code as target code, 
                         P=parent - use parent(s) of source qualifier_code,
                         C=child - use child(ren) of source qualifier_code)
  expand_source_qualifiers (Y or N)
  source_qualifier_subtype (Only look for source records for this subtype)
  target_qualifier_subtype (Only return qualifiers of this subtype)

Alter the qualifier table
  Add qual_subtype

Add qualifier_subtype table
  subtype_code
  qualifier_type
  description

Mockup of metadata to represent current XAuths in the Roles DB
--------------------------------------------------------------